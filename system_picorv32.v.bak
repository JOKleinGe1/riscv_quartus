//file : system_picorv32.v

`define MEMORYSIZE (1*1024)
// 1k = 0x400 = ram size = initial top of stack
`define  LEDR_ADDRESS (32'h8000)
`define  SW_ADDRESS   (32'h8004)

`define  TIMER_ADDRESS_CR   (32'h8100)
`define  TIMER_ADDRESS_CNT  (32'h8104)

`define UART_ADDRESS_TX_DATA    (32'h8200)
`define UART_ADDRESS_CR    (32'h8204)
`define UART_ADDRESS_SR    (32'h8208)

module system_picorv32 (input sys_clk, sys_resetn, output reg [7:0] LEDR, 
						input  [7:0]SW, output uart_tx) ;

	wire 		cpu_trap;
	wire 		cpu_rw_cycle;
	wire 		cpu_instr_fetch;
	reg 		sys_rw_is_done;
	wire [31:0] cpu_address;
	wire [31:0] cpu_write_data;
	wire [3:0] 	cpu_write_strobe;
	wire [31:0] cpu_read_data;
	reg   [31:0] io_read_data;
	reg 		ram_read_enable = 1'b0;

	wire 		sys_write_enable; 
	wire 		sys_read_enable; 

	wire [31:0] ram_read_data;

	reg  [7:0]   timer_control_register; 
	wire [31:0]  timer_counter ; 

	reg  [7:0] 	uart_tx_data;
	reg  		uart_write_new_tx_data;	 
	reg  [7:0] 	uart_control_register;
	wire [7:0]	uart_status_register; 
	
	picorv32 uut (
		.clk         (sys_clk        ),
		.resetn      (sys_resetn     ),
		.trap        (cpu_trap       ),
		.mem_valid   (cpu_rw_cycle  ),
		.mem_instr   (cpu_instr_fetch  ),
		.mem_ready   (sys_rw_is_done  ),
		.mem_addr    (cpu_address   ),
		.mem_wdata   (cpu_write_data  ),
		.mem_wstrb   (cpu_write_strobe  ),
		.mem_rdata   (cpu_read_data )
	);

	assign sys_write_enable = (| cpu_write_strobe); 
	assign sys_read_enable =  cpu_rw_cycle & (! sys_write_enable);
	
	ram1port	ram1port_inst (
	.address 	( cpu_address[9:2] ),
	.byteena 	( cpu_write_strobe ),
	.data 		( cpu_write_data ),
	.clock 		( sys_clk ),
	.rden 		( sys_read_enable ),
	.wren 		( sys_write_enable ),
	.q 			( ram_read_data )
	);
	
	 timer timer1  ( .clock(sys_clk), .control_register( timer_control_register), 
					.millisec_counter(timer_counter));

	uart	uart1 (.clock(sys_clk),.tx(uart_tx),  
	.tx_data(uart_tx_data),.write_new_tx_data(uart_write_new_tx_data),
				.control_register (uart_control_register), 
				.status_register(uart_status_register)); 

		assign  cpu_read_data =   (ram_read_enable == 1'b1) ? ram_read_data :  io_read_data ;

		always @(posedge sys_clk) begin
		sys_rw_is_done <= 1'b0;
	  	uart_write_new_tx_data  = 1'b0;
		ram_read_enable <=  1'b0;
		if (cpu_rw_cycle && !sys_rw_is_done) begin  //  memory cycle
			if (cpu_address <= `MEMORYSIZE) begin
				 sys_rw_is_done <= 1;
				 ram_read_enable <= 1'b1;
			end 
			/* add memory-mapped IO here */ 
			if (cpu_address  ==  `LEDR_ADDRESS) begin
				 sys_rw_is_done <= 1'b1;
				 if (sys_read_enable)   io_read_data  <= { 24'd0 , LEDR }; 
				 if (cpu_write_strobe[0]) LEDR <= cpu_write_data[ 7: 0];
			end 
			if (cpu_address  ==  `SW_ADDRESS) begin
				 sys_rw_is_done <= 1;
				 if (sys_read_enable)  io_read_data  <= { 24'd0 , SW }; 
			end 

			if (cpu_address  ==  `TIMER_ADDRESS_CR) begin
				 sys_rw_is_done <= 1;
				 if (cpu_write_strobe[0]) timer_control_register <= cpu_write_data[ 7: 0];
				 if (sys_read_enable)   io_read_data <= { 24'd0 , timer_control_register }; 
			end 
			if (cpu_address  ==  `TIMER_ADDRESS_CNT) begin
				sys_rw_is_done <= 1;
				  io_read_data  <= timer_counter; 
			end 

			if (cpu_address  ==  `UART_ADDRESS_TX_DATA) begin  
				sys_rw_is_done <= 1;
				if (cpu_write_strobe[0]) uart_tx_data <= cpu_write_data[ 7: 0]; 
				if (cpu_write_strobe[0]) uart_write_new_tx_data =  1'b1; 
			end

			if (cpu_address  ==  `UART_ADDRESS_CR) begin
				sys_rw_is_done <= 1;
				if (cpu_write_strobe[0]) uart_control_register <= cpu_write_data[ 7: 0]; 
				if (sys_read_enable)   io_read_data  <={ 24'd0 , uart_control_register};
			end

			if (cpu_address  ==  `UART_ADDRESS_SR) begin
				sys_rw_is_done <= 1;
				if (sys_read_enable)    io_read_data  <={ 24'd0 , uart_status_register}; 
			end 

		end // end of memory cycle
	end // end of process
endmodule
